name: OnPush

on: [push]

jobs:

# =============================================================================

  PreCommit:
    runs-on: ubuntu-latest

    steps:
      - name: Extract branch name
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Test branch name
        run: |
          echo ${{ steps.extract_branch.outputs.branch }}
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-cache

      - name: Run Pre-Commit
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Fix any issues
        if: failure()
        run: |
          git config --local user.email "pre-commit-bot@pymedphys.com"
          git config --local user.name "PyMedPhys Pre-Commit Bot"
          git commit -m "Fix pre-commit failures" -a
          exit 1
      - name: Push changes
        if: failure()
        uses: ad-m/github-push-action@02b0b75
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.extract_branch.outputs.branch }}

# =============================================================================

  TestingMatrix:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu', 'macos']
        task: ['pylint', 'docs', 'doctest', 'clean', 'pytest', 'slow', 'yarn', 'stackoverflow']
        include:
          - os: 'ubuntu'
            python-version: 3.6
          - os: 'windows'
            python-version: 3.7
          - os: 'macos'
            python-version: 3.7
          - task: 'docs'
            install-type: 'docs'
          - task: ['pylint', 'pytest', 'yarn', 'slow', 'doctest']
            install-type: 'tests'
          - task: 'stackoverflow'
            install-type: 'plain'
          - task: 'clean'
            install-type: 'no-deps'
        exclude:
          - os: 'windows'
            task: ['pylint', 'doctest', 'slow', 'yarn', 'stackoverflow']
          - os: 'macos'
            task: ['pylint', 'doctest', 'slow', 'yarn', 'stackoverflow']

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: ~/.pymedphys
        key: pymedphys-data-${{ hashFiles('**/hashes.json') }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: |
        echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Install poetry
      run: |
        pip install poetry

    - name: Configure poetry
      run: |
        poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ matrix.install-type }}-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        poetry run pip --version >/dev/null 2>&1 || rm -rf .venv


# INSTALLATIONS

## System installs

    - uses: actions/setup-node@v1
      if: matrix.install-type == 'yarn'

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos' && matrix.task != clean && matrix.task != stackoverflow
      run: |
        brew install freetds

    - name: Install Pandoc on Ubuntu
      if: matrix.install-type == 'docs' && matrix.os == 'ubuntu'
      run: |
        sudo apt-get install -y pandoc

    - name: Install Pandoc on MacOS
      if: matrix.install-type == 'docs' && matrix.os == 'macos'
      run: |
        brew install pandoc

    - name: Install Pandoc on Windows
      if: matrix.install-type == 'docs' && matrix.os == 'windows'
      run: |
        choco install pandoc

## No dependencies

    - name: Build wheel and install core dependencies
      if: matrix.install-type == 'no-deps'
      run: |
        poetry build --format wheel
        pip install -r requirements-core.txt

    - name: Install wheel
      if: matrix.install-type == 'no-deps' && matrix.os == 'windows'
      run: |
        python -m pip install (Get-Item .\dist\*.whl) --no-dependencies

    - name: Install wheel
      if: matrix.install-type == 'no-deps' && matrix.os != 'windows'
      run: |
        python -m pip install ./dist/*.whl --no-dependencies

## Plain install

    - name: Run a plain installation
      if: matrix.install-type == 'plain'
      run: |
        poetry install --no-dev

## Install with Documentation Environment

    - name: Run a docs installation
      if: matrix.install-type == 'docs'
      run: |
        poetry install --no-dev -E docs

## Install with Documentation Environment

    - name: Run a tests installation
      if: matrix.install-type == 'tests'
      run: |
        poetry install --no-dev -E tests


# TESTS

## Clean

    - name: Run clean tests
      if: matrix.task == 'clean'
      run: |
        pymedphys --help
        python -c "import pymedphys"

## Doctest

    - name: Run doctest tests
      if: matrix.task == 'doctest'
      run: |
        poetry run pymedphys dev tests -v --doctest-modules

## Pylint

    - name: Run pylint tests
      if: matrix.task == 'pylint'
      run: |
        poetry run pymedphys dev tests --pylint --pylint-jobs=1

## Slow

    - name: Run slow tests
      if: matrix.task == 'slow'
      run: |
        poetry run pymedphys dev tests -v --run-only-slow

## Yarn

    - name: Run tests that need yarn
      if: matrix.task == 'yarn'
      run: |
        poetry run pymedphys dev tests -v -s --run-only-yarn




    - name: Install dependencies
      run: |
        poetry install --no-dev

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos'
      run: |
        brew install freetds

    - name: Install Pandoc on Ubuntu
      if: matrix.toxenv == 'docs' && matrix.os == 'ubuntu'
      run: |
        sudo apt-get install -y pandoc

    - name: Install Pandoc on MacOS
      if: matrix.toxenv == 'docs' && matrix.os == 'macos'
      run: |
        brew install pandoc

    - name: Install Pandoc on Windows
      if: matrix.toxenv == 'docs' && matrix.os == 'windows'
      run: |
        choco install pandoc

    - name: Run Tox on Windows
      if: matrix.os == 'windows'
      run: |
        poetry run tox -e ${{ matrix.toxenv }}-win

    - name: Run Tox on Nix
      if: matrix.os == 'macos' || matrix.os == 'ubuntu'
      run: |
        poetry run tox -e ${{ matrix.toxenv }}-nix

# =============================================================================

  ToxSecond:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu']
        toxenv: ['slow', 'yarn', 'stackoverflow']
        include:
          - toxenv: 'slow'
            python-version: 3.6
          - toxenv: 'yarn'
            python-version: 3.6
          - toxenv: 'stackoverflow'
            python-version: 3.8

    needs: ToxFirst
    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - uses: actions/cache@v1
      with:
        path: ~/.pymedphys
        key: pymedphys-data-${{ hashFiles('**/hashes.json') }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: |
        echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Install poetry
      shell: bash
      run: |
        curl -fsS -o get-poetry.py https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
        python get-poetry.py -y
        echo "::set-env name=PATH::$HOME/.poetry/bin:$PATH"
    - name: Configure poetry
      shell: bash
      run: |
        poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Install dependencies
      shell: bash
      run: |
        poetry install --no-dev -E tox

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos'
      run: |
        brew install freetds

    - name: Install Pandoc on Ubuntu
      if: matrix.toxenv == 'docs' && matrix.os == 'ubuntu'
      run: |
        sudo apt-get install -y pandoc

    - name: Install Pandoc on MacOS
      if: matrix.toxenv == 'docs' && matrix.os == 'macos'
      run: |
        brew install pandoc

    - name: Install Pandoc on Windows
      if: matrix.toxenv == 'docs' && matrix.os == 'windows'
      run: |
        choco install pandoc

    - name: Run Tox on Windows
      if: matrix.os == 'windows'
      run: |
        poetry run tox -e ${{ matrix.toxenv }}-win

    - name: Run Tox on Nix
      if: matrix.os == 'macos' || matrix.os == 'ubuntu'
      run: |
        poetry run tox -e ${{ matrix.toxenv }}-nix

# =============================================================================

  WithUpdates:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu']
        python-version: [3.7]
        toxenv: ['pylint', 'pytest']

    needs: ToxFirst
    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Show python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

    - uses: actions/cache@v1
      with:
        path: ~/.pymedphys
        key: pymedphys-data-${{ hashFiles('**/hashes.json') }}

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos'
      run: |
        brew install freetds

    - name: Upgrade pip, install poetry and tox
      run: |
        python -m pip install --upgrade pip poetry tox

    - name: Run initial poetry install
      run: |
        poetry install

    - name: Run poetry update
      run: |
        poetry update

    - name: Run Tox if anything has changed
      run: |
        git add -A && git diff HEAD --name-only --exit-code || poetry run tox -e ${{ matrix.toxenv }}

# =============================================================================

  Cypress:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu']
        python-version: [3.7]

    runs-on: ${{ matrix.os }}-latest

    needs: ToxSecond
    if: "!contains(github.event.head_commit.message, '--skip-gui')"

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Show python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

#####################
# CACHE LOGIC START #
#####################

# Unfortunately at this current point in time there does not appear to be a way
# to easily reuse content across different actions. The below section manages
# the caching for pymedphys installations from poetry. This logic is often
# repeated across different actions. Once action step reuse is supported this
# section will be refactored out.

    - uses: actions/cache@v1
      with:
        path: ~/.pymedphys
        key: pymedphys-data-${{ hashFiles('**/hashes.json') }}

    - uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

###################
# CACHE LOGIC END #
###################

    - name: Upgrade pip, install poetry
      run: |
        python -m pip install --upgrade pip poetry

    - name: Run poetry install
      run: |
        poetry install --no-dev -E tests

    - name: Download demo data
      run: |
        poetry run python -c "import pymedphys; pymedphys.zip_data_paths('mu-density-gui-e2e-data.zip')"

    - name: Run PyMedPhys GUI
      run: |
        poetry run pymedphys gui &

    - name: Install Cypress Dependencies
      uses: cypress-io/github-action@v1
      with:
        runTests: false
        working-directory: tests/e2e

    - name: Cypress run
      uses: cypress-io/github-action@v1
      with:
        install: false
        record: true
        start: yarn start
        working-directory: tests/e2e
        wait-on: 'http://localhost:8501'
      env:
        # pass the Dashboard record key as an environment variable
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        host: localhost
        port: 8501
