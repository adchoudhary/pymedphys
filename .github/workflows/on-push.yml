name: OnPush

on: [push]

jobs:

# =============================================================================

  PreCommit:
    runs-on: ubuntu-latest

    steps:
      - name: Extract branch name
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Test branch name
        run: |
          echo ${{ steps.extract_branch.outputs.branch }}
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-cache

      - name: Run Pre-Commit
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Fix any issues
        if: failure()
        run: |
          git config --local user.email "pre-commit-bot@pymedphys.com"
          git config --local user.name "PyMedPhys Pre-Commit Bot"
          git commit -m "Fix pre-commit failures" -a
          exit 1
      - name: Push changes
        if: failure()
        uses: ad-m/github-push-action@02b0b75
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.extract_branch.outputs.branch }}

# =============================================================================

  Tests:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu', 'macos', 'windows']
        task:
          [
            'pylint', 'docs', 'doctest', 'clean',
            'pytest', 'slow', 'stackoverflow', 'updates',
            'cypress'
          ]
        exclude:
          - os: 'windows'
            task: 'pylint'
          - os: 'windows'
            task: 'doctest'
          - os: 'windows'
            task: 'slow'
          - os: 'windows'
            task: 'stackoverflow'
          - os: 'windows'
            task: 'updates'
          - os: 'windows'
            task: 'cypress'
          - os: 'macos'
            task: 'pylint'
          - os: 'macos'
            task: 'doctest'
          - os: 'macos'
            task: 'slow'
          - os: 'macos'
            task: 'stackoverflow'
          - os: 'macos'
            task: 'updates'
          - os: 'macos'
            task: 'cypress'

        include:
          - os: 'ubuntu'
            python-version: 3.6
          - os: 'windows'
            python-version: 3.7
          - os: 'macos'
            python-version: 3.7
          - task: 'docs'
            install-type: 'docs'
          - task: 'pylint'
            install-type: 'tests'
          - task: 'pytest'
            install-type: 'tests'
          - task: 'slow'
            install-type: 'tests'
          - task: 'doctest'
            install-type: 'tests'
          - task: 'cypress'
            install-type: 'tests'
          - task: 'stackoverflow'
            install-type: 'plain'
          - task: 'clean'
            install-type: 'no-deps'
          - task: 'updates'
            install-type: 'tests-with-updates'

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: |
        echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install -U pip # to ensure version > 20 to have cache dir
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Pip Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: pip-${{ matrix.install-type }}-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}

    - name: Install poetry
      run: |
        pip install poetry

    - name: Configure poetry
      run: |
        poetry config virtualenvs.in-project true

    - name: Poetry Cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ matrix.install-type }}-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        poetry run pip --version >/dev/null 2>&1 || rm -rf .venv


# INSTALLATIONS

## System installs

    - uses: actions/setup-node@v1
      if: matrix.task == 'yarn'

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos' && matrix.task != 'clean' && matrix.task != 'stackoverflow'
      run: |
        brew install freetds

    - name: Install Pandoc on Ubuntu
      if: matrix.install-type == 'docs' && matrix.os == 'ubuntu'
      run: |
        sudo apt-get install -y pandoc

    - name: Install Pandoc on MacOS
      if: matrix.install-type == 'docs' && matrix.os == 'macos'
      run: |
        brew install pandoc

    - name: Install Pandoc on Windows
      if: matrix.install-type == 'docs' && matrix.os == 'windows'
      run: |
        choco install pandoc

## No dependencies

    - name: Build wheel and install core dependencies
      if: matrix.install-type == 'no-deps'
      run: |
        poetry build --format wheel
        pip install -r requirements-core.txt

    - name: Install wheel
      if: matrix.install-type == 'no-deps' && matrix.os == 'windows'
      run: |
        python -m pip install (Get-Item .\dist\*.whl) --no-dependencies

    - name: Install wheel
      if: matrix.install-type == 'no-deps' && matrix.os != 'windows'
      run: |
        python -m pip install ./dist/*.whl --no-dependencies

## Plain install

    - name: Run a plain installation
      if: matrix.install-type == 'plain'
      run: |
        poetry install --no-dev

## Install with Documentation Environment

    - name: Run a docs installation
      if: matrix.install-type == 'docs'
      run: |
        poetry install --no-dev -E docs

## Install with Tests Environment

    - name: Run a tests installation
      if: matrix.install-type == 'tests'
      run: |
        poetry install --no-dev -E tests

## Update all packages and then install with tests environment and

    - name: Update all packages then install with tests environment
      if: matrix.install-type == 'tests-with-updates'
      run: |
        poetry update
        poetry install --no-dev -E tests


# Download all data for consistent cache

    - name: PyMedPhys Cache
      if: matrix.task != 'clean'
      uses: actions/cache@v2
      with:
        path: ~/.pymedphys
        key: pymedphys-${{ hashFiles('**/hashes.json') }}

    - name: Download all PyMedPhys data for a consistent cache
      if: matrix.task != 'clean'
      run: |
        poetry run python -c "from pymedphys._data import download; download.download_all()"


# TESTS

## Clean

    - name: Run clean tests
      if: matrix.task == 'clean'
      run: |
        pymedphys --help
        python -c "import pymedphys"

## Doctest

    - name: Run doctest tests
      if: matrix.task == 'doctest'
      run: |
        poetry run pymedphys dev tests -v --doctest-modules

## Pylint

    - name: Run pylint tests
      if: matrix.task == 'pylint' || matrix.task == 'updates'
      run: |
        poetry run pymedphys dev tests --pylint --pylint-jobs=1

## Slow

    - name: Run slow tests
      if: matrix.task == 'slow'
      run: |
        poetry run pymedphys dev tests -v --run-only-slow

## Pytest

    - name: Run basic pytest tests
      if: matrix.task == 'pytest' || matrix.task == 'updates'
      run: |
        poetry run pymedphys dev tests -v

## Docs

    - name: Build docs
      if: matrix.task == 'docs'
      run: |
        poetry run pymedphys dev docs

## Stackoverflow

    - name: Run stackoverflow example(s)
      if: matrix.task == 'stackoverflow'
      run: |
        poetry run python ./examples/stackoverflow/gamma.py

## Cypress

    - name: Initially run Cypress tests only locally, without dashboard integration
      if: matrix.task == 'cypress'
      run: |
        poetry run pymedphys dev tests -v -s --run-only-yarn

    - name: Delete GUI demo data and run the PyMedPhys GUI
      if: failure() && matrix.task == 'cypress'
      run: |
        rm -rf pymedphys-gui-demo
        poetry run pymedphys gui &

    - name: Run Cypress through the dashboard tool so as to see the failures
      if: failure() && matrix.task == 'cypress'
      uses: cypress-io/github-action@v1
      with:
        install: false
        record: true
        start: yarn start
        working-directory: tests/e2e
        wait-on: 'http://localhost:8501'
      env:
        # pass the Dashboard record key as an environment variable
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        host: localhost
        port: 8501
